<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇正式的博文</title>
    <url>/2020/06/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%AD%A3%E5%BC%8F%E7%9A%84%E5%8D%9A%E6%96%87/</url>
    <content><![CDATA[<p>捯饬了两个半天，小白的个人网页终于有点样子地上线了，其实现在也不知道码什么，也没想好具体用这个博客干什么，但是这个时候总要写点什么吧。。。</p>
<a id="more"></a>

<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>既然是github托管的博客，那技术肯定是少不了的。目前刚开始看机器学习的一些内容，之后应该会前端、Java二选一。我还是蛮菜的，写的东西对于别人应该不会有太大价值，主要还是记录自己的学习过程。</p>
<h2 id="心理学"><a href="#心理学" class="headerlink" title="心理学"></a>心理学</h2><p>如果不考虑挣面包的事，我应该就去学心理学了。不过也没事啦，还是可以自学一下的。有空的话记录一下心理学相关的学习内容和感悟。</p>
<h2 id="瞎哔叨"><a href="#瞎哔叨" class="headerlink" title="瞎哔叨"></a>瞎哔叨</h2><p>我是话痨，大概有空会在这里瞎写一点个人想法。</p>
<h2 id="其他还有什么我还没想好"><a href="#其他还有什么我还没想好" class="headerlink" title="其他还有什么我还没想好"></a>其他还有什么我还没想好</h2><p>先溜了<br>皮神镇楼</p>
<p><img src="https://i.loli.net/2020/06/20/gFEiqXchKbQHCPo.png" alt="Ash_Pikachu.png"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Github搭建本博客的过程</title>
    <url>/2020/06/20/Hexo-Github%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>其实我也是照着别的大佬详细的教程搭出来的，但过程并没有那么顺遂，菜是原罪。</p>
<a id="more"></a>
<p>主要借鉴的以下三篇：</p>
<blockquote>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a></li>
<li><a href="https://zhangslob.github.io/2017/02/28/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/" target="_blank" rel="noopener">教你免费搭建个人博客，Hexo&amp;Github</a></li>
<li><a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">Ayer中文说明</a>(这个是我选的博客主题，说明详细、页面简洁美观，深得我心，不想折腾的可以选这个)</li>
</ul>
</blockquote>
<p><strong>系统：windows 10 64位，编辑器：sublime text3，控制台：git</strong></p>
<h2 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1.准备阶段"></a>1.准备阶段</h2><p>安装hexo的前提是Node.js（Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本）和Git</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>我是<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">官网</a>下载,配置默认。<br>cmd里输入<code>node -v</code>和<code>npm -v</code>测试是否安装成功。</p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>下载链接<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a><br>cmd输入<code>git --version</code>验证是否安装成功</p>
<h3 id="github上Create-a-new-repository"><a href="#github上Create-a-new-repository" class="headerlink" title="github上Create a new repository"></a>github上Create a new repository</h3><p><img src="https://i.loli.net/2020/06/20/Sm8LORVryZjzWnN.png" alt="screenshot-github.com-2020.06.20-10_35_34.png"><br>命名为<code>yourname.github.io</code>，yourname是你自己github的名字，初始化readme勾选。<br><img src="https://i.loli.net/2020/06/20/fvAteVzDgsBL29a.png" alt="screenshot-github.com-2020.06.20-10_40_27.png"><br>建立完进入setting设置，选择一个主题后点击链接就可看到自己的主页了。<br><img src="https://i.loli.net/2020/06/20/eYyxOTIwZBFA4vc.png" alt="screenshot-github.com-2020.06.20-11_00_41.png"></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>本地新建一个文件夹，用作存放博客的文件，在该目录下右击鼠标选择<code>Git Bash Here</code>，打开git的控制台窗口，开始安装hexo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p><strong>我在这里报了关于npm的错</strong><br>借鉴了<a href="https://cnodejs.org/topic/4f9904f9407edba21468f31e" target="_blank" rel="noopener">使用npm安装一些包失败了的看过来（npm国内镜像介绍）</a><br>我选择了方案一，好用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org </span><br><span class="line">$ npm info underscore （如果上面配置正确这个命令会有字符串response）</span><br></pre></td></tr></table></figure>
<p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p>
<h2 id="2-设置"><a href="#2-设置" class="headerlink" title="2.设置"></a>2.设置</h2><h4 id="初始化文件夹"><a href="#初始化文件夹" class="headerlink" title="初始化文件夹"></a>初始化文件夹</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure>
<p>成功会提示 <code>INFO Start blogging with Hexo!</code></p>
<h4 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<h4 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>浏览器打开<a href="http://localhost:4000可以看到网站的页面，当然这个是本地文件。可以看到自带一篇Hello">http://localhost:4000可以看到网站的页面，当然这个是本地文件。可以看到自带一篇Hello</a> world的文章。<br><strong>按<code>Ctrl+C</code>关闭本地服务器，继续后续操作。</strong> 我一开始忘记了这一步。。。</p>
<h4 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;     #yourname是你自己的github名称</span><br><span class="line">$ git config --global user.email &quot;youremail&quot;      #youremail是你自己github绑定的邮箱</span><br></pre></td></tr></table></figure>
<h4 id="生成密钥SSH-key"><a href="#生成密钥SSH-key" class="headerlink" title="生成密钥SSH key"></a>生成密钥SSH key</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail&quot;      #youremail是你自己github绑定的邮箱</span><br><span class="line">$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>展示的是public key,复制下来，Sign in to GitHub：<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New SSH key </span><br><span class="line">Title：blog</span><br><span class="line">Key：输入刚才复制的—— Add SSH key</span><br></pre></td></tr></table></figure>
<h4 id="输入ssh-T-git-github-com验证是否成功。"><a href="#输入ssh-T-git-github-com验证是否成功。" class="headerlink" title="输入ssh -T git@github.com验证是否成功。"></a>输入<code>ssh -T git@github.com</code>验证是否成功。</h4><h2 id="3-配置博客"><a href="#3-配置博客" class="headerlink" title="3.配置博客"></a>3.配置博客</h2><p>打开博客根目录下的_config.yml文件，修改参数信息。<br><img src="https://i.loli.net/2020/06/20/EJC7ozArvtexXPK.jpg" alt="ftfyjdtu.JPG"><br><img src="https://i.loli.net/2020/06/20/UwAgMfm8OpnGqNa.jpg" alt="捕获.JPG"></p>
<h2 id="4-发布文章"><a href="#4-发布文章" class="headerlink" title="4.发布文章"></a>4.发布文章</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;article_name&quot;   #article_name自取</span><br></pre></td></tr></table></figure>
<p>会提示你新建了一个.md的文件，这是一个markdown文件，对此进行编辑，过程本文不表。<br>关于markdown,我没有选用MarkdownPad进行编辑，因为在win10上运行有点问题，无法使用实时预览功能，需要再安装一个文件，但那样显得冗余。<br>我用的是一款有实时预览功能的在线编辑器<a href="https://dillinger.io/" target="_blank" rel="noopener">https://dillinger.io/</a><br>编辑完之后发布文章，操作如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo c</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>之后会弹出github的登录框，登录后输入自己博客域名就可以看到刚刚的文章已经发布上去了。<br>此时的博客比较简陋，功能单一，作为对前端一无所知的小白，选择使用现成的主题。</p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><blockquote>
<p><a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">Ayer中文说明</a><br>关于这款主题的使用，作者的说明已经十分详细。我记录一下我所进行的修改。</p>
</blockquote>
<p><strong>修改了主页左侧导航栏的内容，进行了删减，只保留了图中四项。</strong><br><img src="https://i.loli.net/2020/06/20/FmCMNU6cwzJkOvG.png" alt="image.png"></p>
<p><strong>打赏、RSS订阅、首页fork主题等功能均在主题下的配置文件里删除了</strong></p>
<p><strong>分类和标签的使用</strong><br><img src="https://i.loli.net/2020/06/20/N7bWX5cuvThoUCY.png" alt="image.png"><br>在文章编辑中添加，格式如图<br>我的markdown是在看了作者文章的md文件后学会的，基本功能用着还行。<br>修改好之后再部署一遍就可以看到带有新主题的个人博客了，不过我左边菜单栏删掉太多东西，想把字放大一点，整体往中间靠一点，但是并不懂前端的东西，让修改css文件无从下手，只能不了了之，有心人看到可以告诉我。</p>
<h3 id="以上就是我捯饬两个半天的内容，毫无技术含量，但略有成就感233333"><a href="#以上就是我捯饬两个半天的内容，毫无技术含量，但略有成就感233333" class="headerlink" title="以上就是我捯饬两个半天的内容，毫无技术含量，但略有成就感233333"></a>以上就是我捯饬两个半天的内容，毫无技术含量，但略有成就感233333</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>写在Datawhale打卡前</title>
    <url>/2020/07/18/%E5%86%99%E5%9C%A8Datawhale%E6%89%93%E5%8D%A1%E5%89%8D/</url>
    <content><![CDATA[<p>“但愿这回能学点什么吧”</p>
<a id="more"></a>
<p>其实并不是第一次参加这种活动，以前报名了拿到了资料然后跑了，资料呢？当然没看！<br>我腆着脸自称有点基础，指的是陆陆续续学过大概三回python，每次都是浅尝辄止，最后一个项目都没有，讲起来好像我学过，但用起来两眼一抹黑啥都不会，希望这次有所改变。<br>其实现在学python对我来讲并不是一个很好的选择，无论算法还是数据分析都已经是神仙打架了，岗位也就那么多。但是我对Java和前端实在是提不起兴趣，数据分析看起来有趣一些。<br>总之，但行好事，莫问前程。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task01-变量、运算符、数据类型及位运算</title>
    <url>/2020/07/20/Python-Task01-%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="Task-01"><a href="#Task-01" class="headerlink" title="Task 01"></a>Task 01</h2><blockquote>
<ul>
<li>一、变量、运算符与数据类型</li>
<li>二、位运算</li>
<li>三、习题</li>
</ul>
</blockquote>
<a id="more"></a>

<h2 id="一、变量、运算符与数据类型"><a href="#一、变量、运算符与数据类型" class="headerlink" title="一、变量、运算符与数据类型"></a>一、变量、运算符与数据类型</h2><h3 id="1-1-注释"><a href="#1-1-注释" class="headerlink" title="1.1 注释"></a>1.1 注释</h3><ul>
<li><code>#</code> 单行注释</li>
<li><code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 区间注释</li>
</ul>
<hr>
<h3 id="1-2-运算符"><a href="#1-2-运算符" class="headerlink" title="1.2 运算符"></a>1.2 运算符</h3><ul>
<li><p><strong>算术运算符</strong><br><code>+</code> <code>-</code> <code>*</code> <code>/</code><br><code>//</code> 整除（地板除）<br><code>%</code> 取余<br><code>**</code> 幂</p>
</li>
<li><p><strong>比较运算符</strong><br><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>==</code> <code>!=</code></p>
</li>
<li><p><strong>逻辑运算符</strong><br><code>and</code>  <code>or</code>  <code>not</code></p>
</li>
<li><p><strong>位运算符</strong><br><code>~</code> 按位取反<br><code>&amp;</code> 按位与<br><code>|</code> 按位或<br><code>^</code> 按位异或（如果a、b两个值不相同，则异或结果为1。 如果a、b两个值相同，异或结果为0。）<br><code>&lt;&lt;</code> 左移，运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数字指定了移动的位数，<strong>高位丢弃，低位补零</strong><br><code>&gt;&gt;</code> 右移，<strong>低位丢弃，高位补零</strong></p>
</li>
<li><p><strong>三元运算符</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">small = x <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> y</span><br><span class="line">print(small)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>其他运算符</strong><br><code>is</code> <code>not is</code> <code>in</code> <code>not in</code></p>
</li>
<li><p><em>注意：*</em></p>
<blockquote>
<ul>
<li><code>is</code>和<code>is not</code>比较的是两个变量的<strong>内存地址</strong>,相对比<code>==</code>、<code>！=</code>比较的是两个变量的<strong>值</strong>。</li>
<li>假如比较的两个变量，指向的都是<strong>地址不可变的类型（str等）</strong>，那么<code>is</code>，<code>is not</code> 和 <code>==</code>，<code>！=</code> 是完全等价的。</li>
<li>假如对比的两个变量，指向的是<strong>地址可变的类型（list，dict，tuple等）</strong>，则两者是有区别的。</li>
</ul>
</blockquote>
</li>
<li><p><strong>运算符优先级</strong><br>a. 一元运算符优于二元运算符。如正负号。<br>b. 先算术运算，后移位运算，最后位运算。例如 <code>1 &lt;&lt; 3 + 2 &amp; 7</code>等价于 <code>(1 &lt;&lt; (3 + 2)) &amp; 7</code><br>c. 逻辑运算最后结合</p>
</li>
</ul>
<hr>
<h3 id="1-3-变量与赋值"><a href="#1-3-变量与赋值" class="headerlink" title="1.3 变量与赋值"></a>1.3 变量与赋值</h3><ul>
<li>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</li>
<li>Python 变量名是大小写敏感的，foo != Foo。</li>
</ul>
<hr>
<h3 id="1-4-数据类型与转换"><a href="#1-4-数据类型与转换" class="headerlink" title="1.4 数据类型与转换"></a>1.4 数据类型与转换</h3><p><strong>1.4.1 整型<code>int</code>  、浮点型 <code>float</code>  、布尔型 <code>bool</code></strong></p>
<ul>
<li><p>十进制整数转二进制并返回二进制长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1031</span></span><br><span class="line">print(bin(a)) <span class="comment"># 0b10000000111</span></span><br><span class="line">print(a.bit_length()) <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>保留浮点型的小数点后 n 位。可以用 decimal 包里的 <code>Decimal</code> 对象和 <code>getcontext()</code>方法来实<br>现,<code>getcontext()</code>显示 <code>Decimal</code> 对象的默认精度值是 28 位( prec=28 )</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">b = Decimal(<span class="number">1</span>) / Decimal(<span class="number">3</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 0.3333333333333333333333333333 默认28位</span></span><br><span class="line"></span><br><span class="line">decimal.getcontext().prec = <span class="number">4</span></span><br><span class="line">c = Decimal(<span class="number">1</span>) / Decimal(<span class="number">3</span>)</span><br><span class="line">print(c)</span><br><span class="line"><span class="comment"># 0.3333 保留4位</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>bool(x)</code> 作用在<strong>基本类型变量</strong>：<code>x</code>只要不是整型 0 、浮点型 0.0 ， <code>bool(x)</code> 就是 <code>True</code> ，其余就是<br><code>False</code>。作用在<strong>容器类型变量</strong>： <code>x</code> 只要不是空的变量， <code>bool(x)</code> 就是 <code>True</code> ，其余就是 <code>False</code> 。</p>
</li>
</ul>
<p><strong>1.4.2 获取类型信息</strong></p>
<p><code>type(object)</code><br><code>isinstance(object,classinfo)</code><br><strong>注意：</strong></p>
<blockquote>
<ul>
<li><code>type()</code> 不会认为子类是一种父类类型，不考虑继承关系。</li>
<li><code>isinstance()</code>会认为子类是一种父类类型，考虑继承关系。</li>
<li>如果要判断两个类型是否相同推荐使用 <code>isinstance()</code> 。</li>
</ul>
</blockquote>
<p><strong>1.4.3 类型转换</strong></p>
<blockquote>
<ul>
<li>转换为整型 <code>int(x, base=10)</code></li>
<li>转换为字符串 <code>str(object=&#39;&#39;)</code></li>
<li>转换为浮点型 <code>float(x)</code></li>
</ul>
</blockquote>
<hr>
<h3 id="1-5-print-函数"><a href="#1-5-print-函数" class="headerlink" title="1.5 print()函数"></a>1.5 print()函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(*objects, sep=<span class="string">' '</span>, end=<span class="string">'\n'</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按<code>str()</code>方式进行转换<br>为字符串输出；</li>
<li>关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li>
<li>关键字参数<code>end</code>是输出结束时的字符，默认是换行符 <code>\n</code>；</li>
<li>关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li>
<li>关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li>
</ul>
</blockquote>
<hr>
<h2 id="二、位运算"><a href="#二、位运算" class="headerlink" title="二、位运算"></a>二、位运算</h2><h3 id="2-1-原码、反码、补码"><a href="#2-1-原码、反码、补码" class="headerlink" title="2.1 原码、反码、补码"></a>2.1 原码、反码、补码</h3><p>计算机内部使用补码</p>
<h3 id="2-2-位运算操作"><a href="#2-2-位运算操作" class="headerlink" title="2.2 位运算操作"></a>2.2 位运算操作</h3><p> <code>~</code> <code>&amp;</code> <code>|</code> <code>^</code> <code>&lt;&lt;</code> <code>&gt;&gt;</code><br>异或满足交换律和结合律</p>
<h3 id="2-3-利用位运算实现快速计算"><a href="#2-3-利用位运算实现快速计算" class="headerlink" title="2.3 利用位运算实现快速计算"></a>2.3 利用位运算实现快速计算</h3><ul>
<li>通过<code>&lt;&lt;</code>、<code>&gt;&gt;</code>快速计算2的倍数问题<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n &lt;&lt; 1 -&gt; 计算 n*2</span><br><span class="line">n &gt;&gt; 1 -&gt; 计算 n&#x2F;2，负奇数的运算不可用</span><br><span class="line">n &lt;&lt; m -&gt; 计算 n*(2^m)，即乘以 2 的 m 次方</span><br><span class="line">n &gt;&gt; m -&gt; 计算 n&#x2F;(2^m)，即除以 2 的 m 次方</span><br><span class="line">1 &lt;&lt; n -&gt; 2^n</span><br></pre></td></tr></table></figure></li>
<li>通过<code>^</code>快速交换两个整数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br></pre></td></tr></table></figure></li>
<li>通过<code>a &amp; (-a)</code>快速获取<code>a</code>的最后为1位置的整数 </li>
</ul>
<h3 id="2-4-利用位运算实现整数集合"><a href="#2-4-利用位运算实现整数集合" class="headerlink" title="2.4 利用位运算实现整数集合"></a>2.4 利用位运算实现整数集合</h3><ul>
<li>元素与集合的操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a | (1&lt;&lt;i) -&gt; 把 i 插入到集合中</span><br><span class="line">a &amp; ~(1&lt;&lt;i) -&gt; 把 i 从集合中删除</span><br><span class="line">a &amp; (1&lt;&lt;i) -&gt;判断i是否属于该集合（零不属于，非零属于）</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="三、习题"><a href="#三、习题" class="headerlink" title="三、习题"></a>三、习题</h2><p><strong>3.1 怎样对python中的代码进行注释？</strong><br><code>#</code> 单行注释<br><code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 区间注释</p>
<p><strong>3.2 python有哪些运算符，这些运算符的优先级是怎样的？</strong><br>算数运算符、比较运算符、逻辑运算符、位运算符等<br>a. 一元运算符优于二元运算符。如正负号。<br>b. 先算术运算，后移位运算，最后位运算。<br>c. 逻辑运算最后结合</p>
<p><strong>3.3 python 中 <code>is</code> , <code>is not</code> 与<code>==</code> , <code>!=</code> 的区别是什么？</strong><br><code>is</code>和<code>is not</code>比较的是两个变量的内存地址,相对比<code>==</code>、<code>！=</code>比较的是两个变量的值。</p>
<p><strong>3.4 python 中包含哪些数据类型？这些数据类型之间如何转换？</strong><br>int float bool<br>转换为整型 int(x, base=10)<br>转换为字符串 str(object=’’)<br>转换为浮点型 float(x)</p>
<p><strong>3.5 leetcode 习题136 只出现一次的数字<br>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br>尝试使用位运算解决此题。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            res ^= i</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task02-条件循环结构</title>
    <url>/2020/07/22/Python-Task02-%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="Task-02"><a href="#Task-02" class="headerlink" title="Task 02"></a>Task 02</h2><blockquote>
<ul>
<li>一、条件语句</li>
<li>二、循环语句</li>
<li>三、习题</li>
</ul>
</blockquote>
<p>重度拖延症患者第二次打卡就已经在追赶deadline了</p>
<a id="more"></a>
<hr>
<h2 id="一、条件语句"><a href="#一、条件语句" class="headerlink" title="一、条件语句"></a>一、条件语句</h2><ul>
<li><p><code>if</code></p>
</li>
<li><p><code>if - else</code></p>
</li>
<li><p><code>if - elif - else</code></p>
</li>
<li><p><code>assert</code>关键词<br><code>assert</code>这个关键词我们称之为“断言”，当这个关键词后边的条件为<code>False</code>时,程序自动崩溃并抛出<code>AssertionError</code>的异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">'lsgogroup'</span>]</span><br><span class="line">my_list.pop(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> len(my_list) &gt; <span class="number">0</span></span><br><span class="line"><span class="comment"># AssertionError</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="二、循环语句"><a href="#二、循环语句" class="headerlink" title="二、循环语句"></a>二、循环语句</h2><h3 id="2-1-while循环"><a href="#2-1-while循环" class="headerlink" title="2.1 while循环"></a>2.1 <code>while</code>循环</h3>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 布尔表达式：</span><br><span class="line">   代码块</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当 <code>while</code> 后写入一个非零整数时，视为真值，执行循环体；写入 0 时，视为假值，不执行循环体。</p>
</li>
<li><p>可以写入 <code>str</code>、<code>list</code> 或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">'abcd'</span></span><br><span class="line"><span class="keyword">while</span> string:</span><br><span class="line">print(string)</span><br><span class="line">string = string[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># abcd</span></span><br><span class="line"><span class="comment"># bcd</span></span><br><span class="line"><span class="comment"># cd</span></span><br><span class="line"><span class="comment"># d</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-while-else循环"><a href="#2-2-while-else循环" class="headerlink" title="2.2 while - else循环"></a>2.2 <code>while - else</code>循环</h3><h3 id="2-3-for循环"><a href="#2-3-for循环" class="headerlink" title="2.3 for循环"></a>2.3 <code>for</code>循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for 迭代变量 in 可迭代对象：</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<p><strong>可以遍历任何有序序列，如 <code>str</code>、<code>list</code>、<code>tuple</code>等，也可以遍历任何可迭代对象，如 <code>dict</code> 。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">'abc'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    print(i,end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment">#a b c</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(key, value, sep=<span class="string">':'</span>, end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># a:1 b:2 c:3 d:4</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-for-else循环"><a href="#2-4-for-else循环" class="headerlink" title="2.4 for-else循环"></a>2.4 <code>for-else</code>循环</h3><h3 id="2-5-range-函数"><a href="#2-5-range-函数" class="headerlink" title="2.5 range()函数"></a>2.5 <code>range()</code>函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range(stop)</span><br><span class="line">range(start, stop[, step])</span><br></pre></td></tr></table></figure>

<h3 id="2-6-enumerate-函数"><a href="#2-6-enumerate-函数" class="headerlink" title="2.6 enumerate()函数"></a>2.6 <code>enumerate()</code>函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enumerate(sequence, [start&#x3D;0])</span><br></pre></td></tr></table></figure>
<p><code>enumerate()</code>与 for 循环的结合使用:用 <code>enumerate(A)</code>不仅返回了 <code>A</code>中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用<code>enumerate(A, j)</code> 还可以确定索引起始值为 <code>j</code> 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">languages = [<span class="string">'Python'</span>, <span class="string">'R'</span>, <span class="string">'Matlab'</span>, <span class="string">'C++'</span>]</span><br><span class="line"><span class="keyword">for</span> i, language <span class="keyword">in</span> enumerate(languages, <span class="number">2</span>):</span><br><span class="line">    print(i, <span class="string">'I love'</span>, language)</span><br><span class="line">print(<span class="string">'Done!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2 I love Python</span></span><br><span class="line"><span class="string">3 I love R</span></span><br><span class="line"><span class="string">4 I love Matlab</span></span><br><span class="line"><span class="string">5 I love C++</span></span><br><span class="line"><span class="string">Done!</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<h3 id="2-7-break语句"><a href="#2-7-break语句" class="headerlink" title="2.7 break语句"></a>2.7 <code>break</code>语句</h3><p>跳出当前所在层的循环</p>
<h3 id="2-8-continue语句"><a href="#2-8-continue语句" class="headerlink" title="2.8 continue语句"></a>2.8 <code>continue</code>语句</h3><p>终止本轮循环并开始下一轮循环。</p>
<h3 id="2-9-pass语句"><a href="#2-9-pass语句" class="headerlink" title="2.9 pass语句"></a>2.9 <code>pass</code>语句</h3><p><code>pass</code>是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管<code>pass</code> 语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个<code>pass</code>语句，让代码可以正常运行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="2-10-推导式"><a href="#2-10-推导式" class="headerlink" title="2.10 推导式"></a>2.10 推导式</h3><p>第一次看到别人写推导式时十分震惊：这是什么奇技淫巧！</p>
<ul>
<li><p>列表推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ express <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] ]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [(i, i ** <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</span></span><br><span class="line"></span><br><span class="line">a = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>) <span class="keyword">if</span> i &lt; <span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>) <span class="keyword">if</span> j &gt; <span class="number">1</span>]</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [(0, 2)]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = &#123;i: i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>&#125;</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># &#123;0: True, 3: False, 6: True, 9: False&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>又一奇技淫巧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(e)</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;</span></span><br><span class="line">print(next(e)) <span class="comment"># 0</span></span><br><span class="line">print(next(e)) <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> e:</span><br><span class="line">    print(each, end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure>
<p><code>next(iterator, default)</code><br><code>iterator</code> -<code>next()</code>retrieves next item from the iterator<br><code>default</code> (optional) - this value is returned if the iterator is exhausted (there is no next item)</p>
</li>
</ul>
<hr>
<h2 id="三、习题"><a href="#三、习题" class="headerlink" title="三、习题"></a>三、习题</h2><p>3.1 编写一个Python程序来查找那些可以被7除以5的整数的数字，介于1500和2700之间。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1500</span></span><br><span class="line">list=[]</span><br><span class="line"><span class="keyword">while</span> a&lt;=<span class="number">2700</span>:</span><br><span class="line">    <span class="keyword">if</span> (a%<span class="number">5</span> <span class="keyword">or</span> a%<span class="number">7</span>) == <span class="number">0</span>:</span><br><span class="line">        list.append(a)</span><br><span class="line">    a+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> (list)</span><br></pre></td></tr></table></figure>

<p>3.2 龟兔赛跑游戏</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1=int(input(<span class="string">'input v1'</span>))</span><br><span class="line">v2=int(input(<span class="string">'input v2'</span>))</span><br><span class="line">t=int(input(<span class="string">'input t'</span>))</span><br><span class="line">s=int(input(<span class="string">'input s'</span>))</span><br><span class="line">l=int(input(<span class="string">'input l'</span>))</span><br><span class="line">time=<span class="number">0</span></span><br><span class="line">s1=<span class="number">0</span></span><br><span class="line">s2=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s1&lt;l <span class="keyword">and</span> s2&lt;l:</span><br><span class="line">    s1 += v1</span><br><span class="line">    s2 += v2</span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s1&gt;=l <span class="keyword">or</span> s2&gt;=l:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> s1-s2&gt;=t:</span><br><span class="line">        s2 += v2*s</span><br><span class="line">        time += s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s1&gt;s2:</span><br><span class="line">    print(<span class="string">'R'</span>,time,sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">elif</span> s1==s2:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'D'</span>,time,sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'T'</span>,time,sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task03-异常处理</title>
    <url>/2020/07/25/Python-Task03-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="Task03"><a href="#Task03" class="headerlink" title="Task03"></a>Task03</h2><a id="more"></a>

<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><p>电脑产生一个零到100之间的随机数字，然后让用户来猜，如果用户猜的数字比这个数字大，提示太大，否则提示太小，当用户正好猜中电脑会提示，”恭喜你猜到了这个数….。.在用户每次猜测之前程序会输出用户是第几次猜测，如果用户输入的根本不是一一个数字，程序会告诉用户”输入无效”。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a=random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num=int(input(<span class="string">"第"</span>+str(count)+<span class="string">"次猜，请输入一个整数:"</span>))</span><br><span class="line">        <span class="keyword">if</span> num&lt;<span class="number">0</span> <span class="keyword">or</span> num&gt;<span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'输入无效'</span>)</span><br><span class="line">        <span class="keyword">if</span> num&lt;a:</span><br><span class="line">            print(<span class="string">'太小'</span>)</span><br><span class="line">        <span class="keyword">elif</span> num&gt;a:</span><br><span class="line">            print(<span class="string">'太大'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'Bingo!'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        print(error)</span><br><span class="line">    count +=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task04-列表、元组和字符串</title>
    <url>/2020/07/27/Python-Task04-%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>leedcode题目没有写出来呜呜呜，就不贴了</p>
<a id="more"></a>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>列表<code>list</code>:<code>有序集合</code>，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为<code>[元素1, 元素2, ..., 元素n]</code> 。</p>
<p>元组<code>tuple</code>:列表类似，不同之处在于元组被创建后就不能对其进行修改，类似字符串，元组定义语法为：<code>(元素1, 元素2, ..., 元素n)</code>。</p>
<p>字符串<code>string</code>：被定义为引号之间的字符集合，具有不可修改性。</p>
<p>字典<code>dict</code>:类似于你通过联系人名字查找地址和联系人详细情况的地址簿，即，我们把key（名字）和<br>value（详细情况）联系在一起。注意，key必须是唯一的，就像如果有两个人恰巧同名的话，你无<br>法找到正确的信息。语法为:<code>{key1 : value1, key2 : value2 }</code>。</p>
<p>集合<code>set</code>：集合与字典类似，也是一组 key 的集合，但不存储 value 。语法为:<code>{元素1, 元素2, ..., 元素n}</code>。集合<code>无序</code>、<code>唯一</code>，唯一指的是由于 key 不能重复，所以在 set 中，没有重复的 key。注意，key为<code>不可变类型</code>，即可哈希的值。</p>
<p>序列：序列类型包括字符串、列表、元组。</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li>直接赋值创建也可以<code>empty = []</code>创建空列表</li>
<li>利用<code>range()</code>创建<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = list(range(<span class="number">10</span>))</span><br><span class="line">print(x, type(x))</span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class 'list'&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建多维数组<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">3</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">print(x, type(x))</span><br><span class="line"><span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class 'list'&gt;</span></span><br></pre></td></tr></table></figure>
<strong>注意</strong>：由于<code>list</code>的元素可以是任何对象，因此<code>列表中所保存的是对象的指针</code>。即使保存一个简单的 [1,2,3] ，也有3个指针和3个整数对象。</li>
</ul>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul>
<li><code>list.append(obj)</code>在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 <code>list</code>中保持着原结构类型。</li>
<li><code>list.extend(seq)</code>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li>
<li><code>list.insert(index, obj)</code> 在编号 <code>index</code>位置前插入 <code>obj</code> 。</li>
</ul>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul>
<li><code>list.remove(obj)</code>移除列表中某个值的第一个匹配项</li>
<li><code>list.pop([index=-1])</code> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</span><br><span class="line">y = x.pop()</span><br><span class="line">print(y) <span class="comment"># Friday</span></span><br><span class="line"></span><br><span class="line">y = x.pop(<span class="number">0</span>)</span><br><span class="line">print(y) <span class="comment"># Monday</span></span><br><span class="line"></span><br><span class="line">y = x.pop(<span class="number">-2</span>)</span><br><span class="line">print(y) <span class="comment"># Wednesday</span></span><br><span class="line">print(x) <span class="comment"># ['Tuesday', 'Thursday']</span></span><br></pre></td></tr></table></figure></li>
<li><code>del var1[, var2 ……]</code> 删除单个或多个对象<br>如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用 <code>del</code>语句；如果你要在删除元素后还能继续使<br>用它，就使用方法 <code>pop()</code> 。</li>
</ul>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>从列表中找出某个值第一个匹配项的索引位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list.index(x[, start[, end]])</span><br></pre></td></tr></table></figure>

<h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><ul>
<li><code>list.count(obj)</code>统计某个元素在列表中出现的次数</li>
<li><code>list.reverse()</code> 反向列表中元素</li>
<li><code>list.sort(key=None, reverse=False)</code>对原列表进行排序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span><br><span class="line">2. reverse -- 排序规则， reverse &#x3D; True 降序， reverse &#x3D; False 升序（默认）。</span><br><span class="line">3. 该方法没有返回值，但是会对列表的对象进行排序。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><ul>
<li>创建元组可以用<code>( )</code>，也可以什么都不用，为了可读性，建议还是用 <code>( )</code>。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">10.31</span>, <span class="string">'python'</span>)</span><br><span class="line">t2 = <span class="number">1</span>, <span class="number">10.31</span>, <span class="string">'python'</span></span><br><span class="line">print(t1, type(t1))</span><br><span class="line"><span class="comment"># (1, 10.31, 'python') &lt;class 'tuple'&gt;</span></span><br><span class="line">print(t2, type(t2))</span><br><span class="line"><span class="comment"># (1, 10.31, 'python') &lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = (<span class="number">1</span>)</span><br><span class="line">print(type(temp)) <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line">temp = <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">print(type(temp)) <span class="comment"># &lt;class 'tuple'&gt;</span></span><br><span class="line">temp = ()</span><br><span class="line">print(type(temp)) <span class="comment"># &lt;class 'tuple'&gt;</span></span><br><span class="line">temp = (<span class="number">1</span>,)</span><br><span class="line">print(type(temp)) <span class="comment"># &lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="更改元素"><a href="#更改元素" class="headerlink" title="更改元素"></a>更改元素</h3><p>元组有不可更改 (immutable)的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 ，那么我们可以直接更改其元素，注意这跟赋值其元素不同。<br>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">print(t1) <span class="comment"># (1, 2, 3, [4, 5, 6])</span></span><br><span class="line">t1[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">print(t1) <span class="comment"># (1, 2, 3, [9, 5, 6])</span></span><br></pre></td></tr></table></figure></p>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">week = (<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>)</span><br><span class="line">week = week[:<span class="number">2</span>] + (<span class="string">'Wednesday'</span>,) + week[<span class="number">2</span>:]</span><br><span class="line">print(week) <span class="comment"># ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')</span></span><br></pre></td></tr></table></figure>

<h3 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h3><ul>
<li><code>count()</code>记录元组中该元素出现次数</li>
<li><code>index()</code>找到该元素在元组中的索引</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="常用内置方法"><a href="#常用内置方法" class="headerlink" title="常用内置方法"></a>常用内置方法</h3><ul>
<li>大小写转换<blockquote>
<p><code>capitalize()</code>将字符串的第一个字符转换为大写<br><code>lower()</code> 转换字符串中所有大写字符为小写。<br><code>upper()</code> 转换字符串中的小写字母为大写。<br><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写。</p>
</blockquote>
</li>
<li><code>count(str, beg= 0,end=len(string))</code> 返回 <code>str</code> 在 string 里面出现的次数，如果 <code>beg</code> 或者 <code>end</code> 指定则返回指定范围内 <code>str</code> 出现的次数。</li>
<li>查找<blockquote>
<p><code>find(str, beg=0, end=len(string))</code> 检测 <code>str</code> 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code> ，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 <code>-1</code>。<br><code>rfind(str, beg=0,end=len(string))</code> 类似于 <code>find()</code> 函数，不过是从右边开始查找。</p>
</blockquote>
</li>
<li>删改<blockquote>
<p><code>lstrip([chars])</code> 截掉字符串左边的空格或指定字符。<br><code>rstrip([chars])</code> 删除字符串末尾的空格或指定字符。<br><code>strip([chars])</code>在字符串上执行 <code>lstrip()</code> 和 <code>rstrip()</code>。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task05-字典、集合和序列</title>
    <url>/2020/07/31/Python-Task05-%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%E5%92%8C%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>云里雾里</p>
<a id="more"></a>
<p>1、字典基本操作<br>  字典内容如下:<br>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line"><span class="string">'python'</span>: <span class="number">95</span>,</span><br><span class="line"><span class="string">'java'</span>: <span class="number">99</span>,</span><br><span class="line"><span class="string">'c'</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>用程序解答下面的题目</p>
<ol>
<li>字典的长度是多少<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(len(dic))</span><br></pre></td></tr></table></figure></li>
<li>请修改’java’ 这个key对应的value值为98<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic[<span class="string">'java'</span>]=<span class="number">98</span></span><br></pre></td></tr></table></figure></li>
<li>删除 c 这个key<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic.pop(<span class="string">'c'</span>)</span><br></pre></td></tr></table></figure></li>
<li>增加一个key-value对，key值为 php, value是90<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic[<span class="string">'php'</span>] = <span class="number">90</span></span><br></pre></td></tr></table></figure></li>
<li>获取所有的key值，存储在列表里<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">keylist = list(dic.keys())</span><br></pre></td></tr></table></figure></li>
<li>获取所有的value值，存储在列表里<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">valuelist = list(dic.values())</span><br></pre></td></tr></table></figure></li>
<li>判断 javascript 是否在字典中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'javascipr'</span> <span class="keyword">in</span> dic.keys():</span><br><span class="line">    print(<span class="string">"exist"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"not exist"</span>)</span><br></pre></td></tr></table></figure></li>
<li>获得字典里所有value 的和<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic.values():</span><br><span class="line">    sum +=i</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure></li>
<li>获取字典里最大的value<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max = list(dic.values())[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic.values():</span><br><span class="line">    <span class="keyword">if</span> max &lt;= i:</span><br><span class="line">        max = i</span><br><span class="line">print(max)</span><br></pre></td></tr></table></figure></li>
<li>获取字典里最小的value<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">min = list(dic.values())[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic.values():</span><br><span class="line">    <span class="keyword">if</span> min &gt;=i:</span><br><span class="line">        min = i</span><br><span class="line">print(min)</span><br></pre></td></tr></table></figure></li>
<li>字典 dic1 = {‘php’: 97}， 将dic1的数据更新到dic中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic.update(dic1)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2、有一个字典，保存的是学生各个编程语言的成绩，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; &#123;</span><br><span class="line">&#39;python&#39;: &#123;&#39;上学期&#39;: &#39;90&#39;, &#39;下学期&#39;: &#39;95&#39;&#125;,</span><br><span class="line">&#39;c++&#39;: [&#39;95&#39;, &#39;96&#39;, &#39;97&#39;],</span><br><span class="line">&#39;java&#39;: [&#123;&#39;月考&#39;:&#39;90&#39;, &#39;期中考试&#39;: &#39;94&#39;, &#39;期末考试&#39;: &#39;98&#39;&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>各门课程的考试成绩存储方式并不相同，有的用字典，有的用列表，但是分数都是字符串类型，请实现函数 <code>transfer_score(score_dict)</code>，将分数修改成<code>int</code>类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"><span class="string">'python'</span>: &#123;<span class="string">'上学期'</span>: <span class="string">'90'</span>, <span class="string">'下学期'</span>: <span class="string">'95'</span>&#125;,</span><br><span class="line"><span class="string">'c++'</span>: [<span class="string">'95'</span>, <span class="string">'96'</span>, <span class="string">'97'</span>],</span><br><span class="line"><span class="string">'java'</span>: [&#123;<span class="string">'月考'</span>:<span class="string">'90'</span>, <span class="string">'期中考试'</span>: <span class="string">'94'</span>, <span class="string">'期末考试'</span>: <span class="string">'98'</span>&#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> data.items():</span><br><span class="line">    <span class="keyword">if</span> type(j) == dict:</span><br><span class="line">        <span class="keyword">for</span> a,b <span class="keyword">in</span> j.items():</span><br><span class="line">            j[a]=int(b)</span><br><span class="line">    <span class="keyword">if</span> type(j) == list:</span><br><span class="line">        <span class="keyword">if</span> len(j) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> j:</span><br><span class="line">                a=int(a)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> a,b <span class="keyword">in</span> j[<span class="number">0</span>].items():</span><br><span class="line">                j[<span class="number">0</span>][a]=int(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (data)</span><br></pre></td></tr></table></figure>
<p>3、列表[‘A’, ‘B’, ‘A’, ‘B’]去重。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>]</span><br><span class="line">mySet = set(lst)</span><br><span class="line">lst = list(mySet)</span><br></pre></td></tr></table></figure>

<p>4、求两个集合{6, 7, 8}，{7, 8, 9}中不重复的元素（差集指的是两个集合交集外的部分）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">print(set1 -set2)</span><br></pre></td></tr></table></figure>

<p>5、求{‘A’, ‘B’, ‘C’}中元素在 {‘B’, ‘C’, ‘D’}中出现的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>&#125;</span><br><span class="line">set2  =&#123;<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> set1:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> set2:</span><br><span class="line">        print(i+<span class="string">"在集合set2中出现1次"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i+<span class="string">"不在集合set2中出现"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、将[<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>]和[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]转成[(x<span class="string">',1),(y",2)('</span>z<span class="string">",3)]的形式。</span></span><br><span class="line"><span class="string">```python</span></span><br><span class="line"><span class="string">zipped = zip(lst1,lst2)</span></span><br><span class="line"><span class="string">list(zipped)</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task06-函数与Lambda表达式</title>
    <url>/2020/08/02/Python-Task06-%E5%87%BD%E6%95%B0%E4%B8%8ELambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>稀里糊涂</p>
<a id="more"></a>

<p>1.给函数编写文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFunction</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="string">"函数文档"</span></span><br><span class="line">    print(<span class="string">"传递来的参数内容&#123;0&#125;是"</span>.format(name))</span><br><span class="line">MyFunction(<span class="string">"helo world"</span>)</span><br><span class="line">help(MyFunction)</span><br></pre></td></tr></table></figure>

<p>2.怎么给函数参数和返回值注解<br>说明函数参数和返回值类型、意义</p>
<p>3.闭包中，怎么对数字、字符串、元组等不可变元素更新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def outer():</span><br><span class="line">    num &#x3D; 10</span><br><span class="line"></span><br><span class="line">    def inner():</span><br><span class="line">        nonlocal num  # nonlocal关键字声明</span><br><span class="line">        num &#x3D; 100</span><br><span class="line">        print(num)</span><br><span class="line"></span><br><span class="line">    inner()</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outer()</span><br></pre></td></tr></table></figure>

<p>4.分别根据每一行的首元素和尾元素大小对二维列表 a = [[6, 5], [3, 7], [2, 8]] 排序。(利用lambda表达式)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">6</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">8</span>]]</span><br><span class="line">a.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<p>5.有a、b、c三根柱子，在a柱子上从下往上按照大小顺序摞着64片圆盘，把圆盘从下面开始按大小顺序重新摆放在c柱子上，尝试用函数来模拟解决的过程。（提示：将问题简化为已经成功地将a柱上面的63个盘子移到了b柱）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task07-类、对象与魔法对象</title>
    <url>/2020/08/05/Python-Task07-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%AD%94%E6%B3%95%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>拖延症晚期无药可救</p>
<a id="more"></a>
<p>一、按照以下要求定义一个游乐园门票的类，并尝试计算2个成人+1个小孩平日票价。</p>
<ol>
<li>平日票价100元</li>
<li>周末票价为平日的120%</li>
<li>儿童票半价</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, workday = True, adult = True)</span>:</span></span><br><span class="line">        self.price = <span class="number">100</span></span><br><span class="line">        <span class="keyword">if</span> workday:</span><br><span class="line">            self.ratio = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.ratio = <span class="number">1.2</span></span><br><span class="line">        <span class="keyword">if</span> adult:</span><br><span class="line">            self.discount = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.discount = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_price</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.ratio * self.discount * num</span><br><span class="line"></span><br><span class="line">adult1 = Ticket(<span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">child1 = Ticket(<span class="literal">True</span>, <span class="literal">False</span>)</span><br><span class="line">print(<span class="string">"2个成人+1个小孩平日票价为%.2f"</span> %(adult1.get_price(<span class="number">2</span>) + child1.get_price(<span class="number">1</span>)))</span><br></pre></td></tr></table></figure>

<p>二、利用python做一个简单的定时器类<br>要求:</p>
<ol>
<li>定制一个计时器的类。</li>
<li>start 和 stop 方法代表启动计时和停止计时。</li>
<li>假设计时器对象 t1 ， print(t1) 和直接调用 t1 均显示结果。</li>
<li>当计时器未启动或已经停止计时时，调用 stop 方法会给予温馨的提示。</li>
<li>两个计时器对象可以进行相加： t1+t2 。</li>
<li>只能使用提供的有限资源完成。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,time)</span>:</span></span><br><span class="line">        self.time = time</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.time+=<span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> self.time == <span class="number">4</span>:</span><br><span class="line">                self.stop()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"计时器已经停止了"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self,others)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Timer(self.time+others.time)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"当前的时间为 %d"</span>%(self.time)</span><br><span class="line">timer = Timer(<span class="number">0</span>)</span><br><span class="line">timer.start()</span><br><span class="line">print(timer)</span><br><span class="line">timer2 = Timer(<span class="number">1</span>)</span><br><span class="line">timer2.start()</span><br><span class="line">print(timer2)</span><br><span class="line">print(timer+timer2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Task08-模块</title>
    <url>/2020/08/07/Python-Task08-%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>这部分内容还算熟悉，datetime模块前阵子正好用到过，打卡时发现不知不觉这个课程也快水完了。</p>
<a id="more"></a>
<p>1、了解Collection模块，编写程序以查询给定列表中最常见的元素。</p>
<p>题目说明：</p>
<p>输入：language = [‘PHP’, ‘PHP’, ‘Python’, ‘PHP’, ‘Python’, ‘JS’, ‘Python’, ‘Python’,’PHP’, ‘Python’]</p>
<p>输出：Python</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">language = [<span class="string">'PHP'</span>, <span class="string">'PHP'</span>, <span class="string">'Python'</span>, <span class="string">'PHP'</span>, <span class="string">'Python'</span>, <span class="string">'JS'</span>, <span class="string">'Python'</span>, <span class="string">'Python'</span>,<span class="string">'PHP'</span>, <span class="string">'Python'</span>]</span><br><span class="line">a=Counter(language)</span><br><span class="line">b=a.most_common(<span class="number">1</span>)</span><br><span class="line">print(b[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>2、假设你获取了用户输入的日期和时间如2020-1-21 9:01:30，以及一个时区信息如UTC+5:00，均是str，请编写一个函数将其转换为timestamp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone, timedelta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_timestamp</span><span class="params">(dt_str, tz_str)</span>:</span></span><br><span class="line">    time1 = datetime.strptime(dt_str,<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    hours = int(tz_str[<span class="number">3</span>:tz_str.index(<span class="string">':'</span>)])</span><br><span class="line">    tz = timezone(timedelta(hours=hours))</span><br><span class="line">    dt = time1.replace(tzinfo=tz)</span><br><span class="line">    <span class="keyword">return</span> dt.timestamp()</span><br></pre></td></tr></table></figure>

<p>3、编写Python程序以选择指定年份的所有星期日。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(year)</span>:</span></span><br><span class="line">  dt1 = datetime(year=year,month=<span class="number">1</span>,day=<span class="number">1</span>)</span><br><span class="line">  dt2 = datetime(year=<span class="number">1</span>,month=<span class="number">12</span>,day=<span class="number">31</span>)</span><br><span class="line">  dt = (dt2 - dt1).days</span><br><span class="line">  d = timedelta(days=<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(dt+<span class="number">1</span>):</span><br><span class="line">    a = dt1.isoweekday()</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">7</span>:</span><br><span class="line">        s = dt1.strftime(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        print(s)</span><br><span class="line">    dt1 = dt1 + d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
